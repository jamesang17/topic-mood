{"version":3,"sources":["twitter.svg","ingestion/IngestionProvider.js","components/logProps.js","ingestion/HistoricalRuns.js","ingestion/StartIngestMenu.js","ingestion/IngestionModule.js","monitoring/MonitoringSnack.js","monitoring/ChartProvider.js","monitoring/ListTopics.js","monitoring/MonitorTopicInput.js","monitoring/SentimentLineChart.js","monitoring/OverallSentiment.js","monitoring/Sentences.js","monitoring/MonitoringModule.js","components/MenuAppBar.js","components/ModuleContainer.js","themes/Theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MContext","React","createContext","IngestionProvider","props","state","runData","topic","apiResponse","getDagRuns","bind","parseAndSetDagRuns","handleTopicSubmit","handleTrendSubmit","triggerRun","event","console","log","this","data","runs","N","length","i","run","Map","set","push","setState","fetch","then","response","json","catch","error","text","Provider","value","setRunData","setTopic","children","Component","logProps","WrappedComponent","prevProps","styles","makeStyles","table","minWidth","HistoricalRuns","colorState","className","classes","Consumer","context","Button","variant","color","endIcon","style","fontSize","onClick","TableContainer","component","Paper","Table","aria-label","stickyHeader","size","TableHead","TableRow","TableCell","TableBody","map","index","key","scope","get","contextType","withStyles","useStyles","theme","root","margin","spacing","extendedIcon","marginRight","StartIngestMenu","openTopicDialog","openTrendDialog","handleTopicClickOpen","handleTrendClickOpen","handleClose","Fab","Dialog","onClose","aria-labelledby","open","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","label","type","fullWidth","inputRef","ref","onChange","e","currentTarget","DialogActions","IngestionModule","MonitoringSnack","handleOpen","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","ChartProvider","latestSen","posSent","negSent","previousTopics","handleSubmit","handleChange","handleItemClick","getTopicData","getTopics","snackRef","createRef","current","submitted","encodedTopic","encodeURIComponent","JSON","parse","handleOpenSnack","resMap","innerText","setData","width","maxWidth","backgroundColor","palette","background","paper","ListTopics","List","ListItem","button","ListItemText","primary","MonitorTopicInput","Grid","container","alignItems","item","helperText","SentimentLineChart","height","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","OverallSentiment","renderEmoji","sentVal","Sentences","MonitoringModule","Divider","flexGrow","menuButton","title","MenuAppBar","AppBar","position","Typography","src","logo","alt","TabPanel","other","role","hidden","Box","p","a11yProps","ModuleContainer","useState","setValue","Tabs","newValue","Tab","disabled","createMuiTheme","blue","secondary","cyan","overrides","MuiButton","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efe74131.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.f9efc7fe.svg\";","import React from 'react';\n\nexport const MContext = React.createContext(); // exporting context object\n\nexport default class IngestionProvider extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trunData: [],\n\t\t\ttopic: \"\",\n\t\t\tapiResponse: \"\"\n\t\t}\n        this.getDagRuns = this.getDagRuns.bind(this);\n        this.parseAndSetDagRuns = this.parseAndSetDagRuns.bind(this);\n        this.handleTopicSubmit = this.handleTopicSubmit.bind(this);\n\t\tthis.handleTrendSubmit = this.handleTrendSubmit.bind(this);\n\t\tthis.triggerRun = this.triggerRun.bind(this);\n\t}\n\n\thandleTopicSubmit(event) {\n\t\tconsole.log(\"Clicked submit!\");\n\t\tthis.triggerRun(this.state.topic);\n\t\tconsole.log(\"Response: \" + this.state.apiResponse);\n\t}\n\n\thandleTrendSubmit(event) {\n\t\tconsole.log(\"Clicked submit!\");\n\t\tthis.triggerRun(\"trends\");\n\t\tconsole.log(\"Response: \" + this.state.apiResponse);\n\t}\n\n    parseAndSetDagRuns(data) {\n        var runs = [];\n\t\t// we only want to get the last 50 runs\n\t\tvar N = data.length-1;\n        for (var i=0;i<10;i++) {\n            var run = new Map();\n            run.set(\"startDate\", data[N-i][\"start_date\"])\n            run.set(\"state\", data[N-i][\"state\"])\n            runs.push(run);\n        }\n        this.setState({ runData: runs });\n    }\n\n    getDagRuns() {\n        fetch(\"http://localhost:4000/dag_runs\")\n\t\t\t.then((response) => response.json())\n            .then((response) => this.parseAndSetDagRuns(response))\n            .catch((error) => error);\n    }\n\n\ttriggerRun(topic) {\n\t\tconsole.log(\"Topic: \" + topic);\n\t\tfetch(\"http://localhost:4000/trigger_dag/\" + topic)\n\t\t\t.then(response => response.text())\n\t\t\t.then(response => this.setState({ apiResponse: response }));\n\t\tthis.getDagRuns();\n\t}\n\n    componentDidMount() {\n        this.getDagRuns();\n    }\n\n    render() {\n\t\treturn (\n\t\t\t<MContext.Provider value = {\n\t\t\t\t{ state: this.state,\n\t\t\t\t\tsetRunData: (value) => this.setState({\n\t\t\t\t\t\trunData: value\n\t\t\t\t\t}),\n\t\t\t\t\tsetTopic: (value) => this.setState({\n\t\t\t\t\t\ttopic: value\n\t\t\t\t\t}),\n\t\t\t\t\thandleTopicSubmit: this.handleTopicSubmit,\n\t\t\t\t\thandleTrendSubmit: this.handleTrendSubmit,\n\t\t\t\t\tgetDagRuns: this.getDagRuns\n\t\t\t\t}\n\t\t\t}>\n\t\t\t{this.props.children}\n\t\t\t</MContext.Provider>\n\t\t)\n\t}\n\n}\n","import React from 'react';\n\nfunction logProps(WrappedComponent) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('old props:', prevProps);\n      console.log('new props:', this.props);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return LogProps;\n}\n\nexport default logProps;","import React from 'react';\nimport logProps from '../components/logProps';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MContext } from './IngestionProvider';\nimport './HistoricalRuns.css';\n\nconst styles = makeStyles({\n    table: {\n        minWidth: 800\n    },\n});\n\nclass HistoricalRuns extends React.Component {\n    constructor(props) {\n        super(props);\n        this.colorState = this.colorState.bind(this);\n    }\n\n    colorState(state) {\n        if (state === \"success\") {\n            return (\n                <p className=\"Success-state\">{state}</p>\n            )\n        } else if (state === \"failed\") {\n            return (\n                <p className=\"Failed-state\">{state}</p>\n            )\n        } else {\n            return (\n                <p className=\"Other-state\">{state}</p>\n            )\n        }\n    }\n\n\n    render() {\n\n        const classes = styles;\n\n        return (\n            <div>\n                <MContext.Consumer>\n                    {(context) => (\n                    <div>\n                        <div className=\"Refresh-button\">\n                            <Button variant=\"contained\" color=\"primary\"\n                                endIcon={<RefreshIcon style={{ fontSize: 40 }} />}\n                                 onClick={context.getDagRuns}>\n                                 Refresh\n                            </Button>\n                        </div>\n                        <TableContainer component={Paper}>\n                            <Table className={classes.table} aria-label=\"Ingestion Runs\"\n                                stickyHeader={true} size=\"medium\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Start Date</TableCell>\n                                        <TableCell>State</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {context.state.runData.map((run,index) => (\n                                        <TableRow key={index}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {run.get(\"startDate\")}\n                                            </TableCell>\n                                            <TableCell>{this.colorState(run.get(\"state\"))}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </div>\n                    )}\n                </MContext.Consumer>\n            </div>\n        );\n    }\n}\n\nHistoricalRuns.contextType = MContext;\nexport default logProps(withStyles(styles)(HistoricalRuns));\n","import React from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MContext } from './IngestionProvider';\nimport './StartIngestMenu.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nclass StartIngestMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            openTopicDialog: false,\n\t\t\topenTrendDialog: false,\n        }\n        this.handleTopicClickOpen = this.handleTopicClickOpen.bind(this);\n        this.handleTrendClickOpen = this.handleTrendClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleTopicClickOpen() {\n        console.log(\"Clicked Topic button!\");\n        this.setState({ openTopicDialog: true })\n    }\n\n    handleTrendClickOpen() {\n        console.log(\"Clicked Trend button!\");\n        this.setState({ openTrendDialog: true })\n    }\n\n    handleClose() {\n        console.log(\"Closing!\");\n        if (this.state.openTopicDialog === true){\n            this.setState({ openTopicDialog: false });\n        }\n        if (this.state.openTrendDialog === true){\n            this.setState({ openTrendDialog: false });\n        }\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <MContext.Consumer>\n                {(context) => (\n                    <div>\n                    <div className=\"Fab-button\">\n        \t\t\t\t<Fab variant=\"extended\" onClick={this.handleTopicClickOpen}>\n                            Start Topic Ingestion\n                        </Fab>\n                    </div>\n                    <div className=\"Fab-button\">\n                        <Fab variant=\"extended\" onClick={this.handleTrendClickOpen}>\n                            Start Trend Ingestion\n                        </Fab>\n                    </div>\n                    <Dialog onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\"\n                        open={this.state.openTopicDialog}>\n                        <DialogTitle id=\"form-dialog-title\">Start Topic Ingestion</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                Enter the topic you would you like to run sentiment analysis on. The topic field can take single\n                                phrase topics such as \"NYC\" or \"New York City\". At the moment it cannot take multiple topics at the\n                                same time such as \"NYC,CA\".\n                            </DialogContentText>\n                            <TextField autoFocus margin=\"dense\" id=\"topic\"\n                                label=\"topic\" type=\"text\"\n                                fullWidth inputRef={this.ref}\n                                onChange={(e) => context.setTopic(e.currentTarget.value)} />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color=\"secondary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => {context.handleTopicSubmit(); this.handleClose();}} color=\"primary\" >\n                                Start\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    <Dialog onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\"\n                        open={this.state.openTrendDialog}>\n                        <DialogTitle id=\"form-dialog-title\">Start Trend Ingestion</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                Run sentiment analysis on the top 5 globally trending topics on twitter.\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color=\"secondary\">\n                                Cancel\n                            </Button>\n                            <Button onClick={() => {context.handleTrendSubmit(); this.handleClose();}} color=\"primary\" >\n                                Start\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    </div>\n                )}\n                </MContext.Consumer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nStartIngestMenu.contextType = MContext;\nexport default withStyles(useStyles)(StartIngestMenu);\n","import React from 'react';\nimport IngestionProvider from './IngestionProvider';\nimport HistoricalRuns from './HistoricalRuns';\nimport StartIngestMenu from './StartIngestMenu';\nimport './IngestionModule.css';\n\nclass IngestionModule extends React.Component {\n    render() {\n        return (\n            <div className=\"Ingestion-module\">\n                <IngestionProvider>\n                    <div className=\"Ingestion-component\">\n                        <StartIngestMenu />\n                    </div>\n                    <div className=\"Historical-Runs\">\n                        <HistoricalRuns />\n                    </div>\n                </IngestionProvider>\n            </div>\n        );\n    }\n}\n\nexport default IngestionModule;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\nexport default class MonitoringSnack extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false\n    }\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleClose() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <Snackbar\n         anchorOrigin={{\n           vertical: 'bottom',\n           horizontal: 'left',\n         }}\n         open={this.state.open}\n         autoHideDuration={3000}\n         onClose={this.handleClose}\n         message=\"No results were found for that topic.\"\n        />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport MonitoringSnack from './MonitoringSnack';\n\nexport const MContext = React.createContext(); // exporting context object\n\nexport default class ChartProvider extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tvalue: \"\",\n\t\t\ttopic: \"\",\n\t\t\tdata: [],\n\t\t\tlatestSen: \"\",\n\t\t\tposSent: \"\",\n\t\t\tnegSent: \"\",\n\t\t\tpreviousTopics: []\n\t\t}\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleItemClick = this.handleItemClick.bind(this);\n\t\tthis.getTopicData = this.getTopicData.bind(this);\n\t\tthis.getTopics = this.getTopics.bind(this);\n\t\tthis.snackRef = React.createRef();\n\t}\n\n\thandleOpenSnack() {\n\t\tthis.snackRef.current.handleOpen();\n\t}\n\n\tgetTopics() {\n\t\tfetch(\"http://localhost:4000/topics\")\n\t\t\t.then((response) => response.json())\n            .then((response) => {\n\t\t\t\tthis.setState({ submitted: false });\n\t\t\t\tthis.setState({ previousTopics: response });\n\t\t\t})\n            .catch((error) => error);\n\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getTopics();\n\t}\n\n\thandleChange(event) {\n        this.setState({value: event.currentTarget.value});\n    }\n\n\tgetTopicData(topic) {\n\t\tvar encodedTopic = encodeURIComponent(topic);\n\t\tfetch(\"http://localhost:4000/topics/\" + encodedTopic)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((response) => {\n\t\t\t\tif (JSON.parse(response).length === 0) {\n\t\t\t\t\tthis.handleOpenSnack();\n\t\t\t\t} else {\n\t\t\t\t\tvar resMap = new Map(JSON.parse(response));\n\t\t\t\t\tthis.setState({ data: resMap.get(\"data\") });\n\t\t\t\t\tthis.setState({ topic: resMap.get(\"topic\")});\n\t\t\t\t\tthis.setState({ latestSen: resMap.get(\"latestSen\")});\n\t\t\t\t\tthis.setState({ posSent: resMap.get(\"posSent\")});\n\t\t\t\t\tthis.setState({ negSent: resMap.get(\"negSent\")});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\thandleSubmit(event) {\n\t\tif (this.state.value === \"\") {\n\t\t\tthis.handleOpenSnack();\n\t\t} else {\n\t\t\tthis.getTopicData(this.state.value);\n\t\t}\n\t}\n\n\thandleItemClick(event) {\n\t\tconst topic  = event.currentTarget.innerText;\n\t\tthis.setState(\n\t\t\t{topic: topic},\n\t\t\tfunction() {\n\t\t\t\tthis.getTopicData(this.state.topic);\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<MContext.Provider value = {\n\t\t\t\t{ state: this.state,\n\t\t\t\t\tsetTopic: (value) => this.setState({\n\t\t\t\t\t\ttopic: value\n\t\t\t\t\t}),\n\t\t\t\t\tsetData: (value) => this.setState({\n\t\t\t\t\t\tdata: value\n\t\t\t\t\t}),\n\t\t\t\t\thandleSubmit: this.handleSubmit,\n\t\t\t\t\thandleChange: this.handleChange,\n\t\t\t\t\thandleItemClick: this.handleItemClick,\n\t\t\t\t\tgetTopics: this.getTopics\n\t\t\t\t}\n\t\t\t}>\n\t\t\t{this.props.children}\n\t\t\t<MonitoringSnack ref= {this.snackRef} />\n\t\t\t</MContext.Provider>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { MContext } from './ChartProvider';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nclass ListTopics extends React.Component {\n    render() {\n        const classes = useStyles;\n\n        return (\n            <div>\n                <MContext.Consumer>\n                    {(context) => (\n                    <div>\n                        <div className=\"Refresh-button\">\n                            <Button variant=\"contained\" color=\"primary\"\n                                endIcon={<RefreshIcon style={{ fontSize: 25 }} />}\n                                onClick={context.getTopics}>\n                                Refresh Topics\n                            </Button>\n                        </div>\n                        <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\n                            {context.state.previousTopics.map((value,index) => {\n                                return (\n                                    <ListItem key={index} button onClick={context.handleItemClick}>\n                                        <ListItemText primary={value} />\n                                    </ListItem>\n                                )\n                            })\n                            }\n                        </List>\n                    </div>\n                    )}\n                </MContext.Consumer>\n            </div>\n        )\n    }\n}\n\nListTopics.contextType = MContext;\nexport default withStyles(useStyles)(ListTopics);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\nimport { MContext } from './ChartProvider';\n\nclass MonitorTopicInput extends React.Component {\n\n    render() {\n    \treturn (\n        <div>\n        <MContext.Consumer>\n        {(context) => (\n          <Grid container spacing={2} alignItems=\"flex-end\">\n            <Grid item>\n              <TextField variant=\"standard\" label=\"Search Analyzed Topics\"\n                helperText=\"single topics e.g. Twitter, Python\"\n                value={this.context.topic}\n                onChange={this.context.handleChange}\n              />\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" size=\"large\" color=\"primary\"\n                onClick={this.context.handleSubmit}>\n                <SearchIcon fontSize=\"default\"/>\n              </Button>\n            </Grid>\n          </Grid>\n        )}\n        </MContext.Consumer>\n        </div>\n    \t)\n    }\n}\n\nMonitorTopicInput.contextType = MContext;\nexport default MonitorTopicInput;\n","import React from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport { MContext } from './ChartProvider';\nimport './SentimentLineChart.css';\n\nclass SentimentLineChart extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<MContext.Consumer>\n\t\t\t\t{(context) => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Topic: {context.state.topic}</p>\n\t\t\t\t\t\t<div className=\"Chart-container\">\n\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={400}>\n\t\t\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\t        data={context.state.data}\n\t\t\t\t\t\t\t        margin={{\n\t\t\t\t\t\t\t          top: 5, right: 20, left: 20, bottom: 5,\n\t\t\t\t\t\t\t        }}\n\t\t\t\t\t\t\t    >\n\t\t\t\t\t\t\t        <CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t        <XAxis dataKey=\"timestamp\"/>\n\t\t\t\t\t\t\t        <YAxis />\n\t\t\t\t\t\t\t        <Tooltip />\n\t\t\t\t\t\t\t        <Legend />\n\t\t\t\t\t\t\t        <Line type=\"monotone\" dataKey=\"sentiment\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n\t\t\t\t\t\t\t     </LineChart>\n\t\t\t\t\t\t     </ResponsiveContainer>\n\t\t\t\t\t\t</div>\n\t\t\t\t     </div>\n\t\t\t     )}\n\t\t\t\t</MContext.Consumer>\n\t\t    </div>\n\t\t)\n\t}\n}\n\nSentimentLineChart.contextType = MContext;\nexport default SentimentLineChart;\n","import React from 'react';\nimport { MContext } from './ChartProvider';\nimport FaceRoundedIcon from '@material-ui/icons/FaceRounded';\nimport SentimentVerySatisfiedRoundedIcon from '@material-ui/icons/SentimentVerySatisfiedRounded';\nimport SentimentSatisfiedRoundedIcon from '@material-ui/icons/SentimentSatisfiedRounded';\nimport SentimentDissatisfiedRoundedIcon from '@material-ui/icons/SentimentDissatisfiedRounded';\nimport SentimentVeryDissatisfiedRoundedIcon from '@material-ui/icons/SentimentVeryDissatisfiedRounded';\n\nclass OverallSentiment extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderEmoji = this.renderEmoji.bind(this);\n\t}\n\n\trenderEmoji(sentVal) {\n\t\tif (sentVal >= 0.05 && sentVal <= 0.2) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Positive</p>\n\t\t\t\t\t<SentimentSatisfiedRoundedIcon style={{ fontSize: 100 }} />\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t} else if (sentVal <= -0.05 && sentVal >= -0.2) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Negative</p>\n\t\t\t\t\t<SentimentDissatisfiedRoundedIcon style={{ fontSize: 100 }} />\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t} else if (sentVal < -0.2) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Very Negative</p>\n\t\t\t\t\t<SentimentVeryDissatisfiedRoundedIcon style={{ fontSize: 100 }} />\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t} else if (sentVal > 0.2) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Very Positive</p>\n\t\t\t\t\t<SentimentVerySatisfiedRoundedIcon style={{ fontSize: 100 }} />\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t} else if (sentVal === \"\") {\n\t\t\treturn <p></p>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Neutral</p>\n\t\t\t\t\t<FaceRoundedIcon style={{ fontSize: 100 }} />\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>Latest Sentiment</p>\n\t\t\t\t<MContext.Consumer>\n\t\t\t\t\t{(context) => (\n\t\t\t\t\t\t<div>{this.renderEmoji(context.state.latestSen)}</div>\n\t\t\t\t\t)}\n\t\t\t\t</MContext.Consumer>\n\t\t    </div>\n\t\t)\n\t}\n}\n\nOverallSentiment.contextType = MContext;\nexport default OverallSentiment;\n","import React from 'react';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { MContext } from './ChartProvider';\nimport './Sentences.css';\n\nclass Sentences extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"Sentence-container\">\n\t\t\t\t<p className=\"Sentence-header\">Sentences</p>\n\t\t\t\t<MContext.Consumer>\n\t\t\t\t\t{(context) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<ThumbUpIcon />\n\t\t\t\t\t\t\t<p className=\"Sentence\">{context.state.posSent}</p>\n\t\t\t\t\t\t\t<ThumbDownIcon />\n\t\t\t\t\t\t\t<p className=\"Sentence\">{context.state.negSent}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</MContext.Consumer>\n\t\t    </div>\n\t\t)\n\t}\n}\n\nSentences.contextType = MContext;\nexport default Sentences;\n","import React from 'react';\nimport ChartProvider from './ChartProvider';\nimport ListTopics from './ListTopics';\nimport MonitorTopicInput from './MonitorTopicInput'\nimport SentimentLineChart from './SentimentLineChart';\nimport OverallSentiment from './OverallSentiment';\nimport Sentences from './Sentences';\nimport './MonitoringModule.css';\nimport Divider from '@material-ui/core/Divider';\n\n\nclass MonitoringModule extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Monitoring-module\">\n                <ChartProvider>\n                    <div className=\"Monitoring-component-container\">\n                        <MonitorTopicInput className=\"Monitoring-component\" />\n                        <div>\n                            PREVIOUS TOPICS\n                            <ListTopics className=\"Monitoring-component\" />\n                        </div>\n                    </div>\n                    <Divider variant=\"middle\" />\n                    <div className=\"Monitoring-component-container\">\n                        <OverallSentiment className=\"Monitoring-component\" />\n                        <Sentences className=\"Monitoring-component\" />\n                    </div>\n                    <Divider variant=\"middle\" />\n                    <div className=\"Monitoring-component-container\">\n                        <SentimentLineChart className=\"Monitoring-component\" />\n                    </div>\n                </ChartProvider>\n            </div>\n        )\n    }\n}\nexport default MonitoringModule;\n","import React from 'react';\nimport logo from '../twitter.svg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nclass MenuAppBar extends React.Component {\n\n    render() {\n      return (\n        <div className={this.props.classes.root}>\n          <AppBar position=\"static\">\n            <Typography variant=\"h6\" className={this.props.classes.title}>\n              Tweet Analyzer\n            </Typography>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </AppBar>\n        </div>\n      );\n    }\n\n}\n\nexport default withStyles(styles)(MenuAppBar);\n","import React from 'react';\nimport IngestionModule from '../ingestion/IngestionModule';\nimport MonitoringModule from '../monitoring/MonitoringModule';\nimport MenuAppBar from './MenuAppBar';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport './Navigation.css';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function ModuleContainer() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n       <div className={classes.root}>\n          <MenuAppBar />\n          <AppBar position=\"static\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n              <Tab label=\"MONITORING\" {...a11yProps(0)} />\n              <Tab label=\"INGESTION\" {...a11yProps(1)} disabled />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0} className=\"Tab-panel\">\n            <MonitoringModule />\n          </TabPanel>\n          <TabPanel value={value} index={1} className=\"Tab-panel\" disabled>\n            <IngestionModule />\n          </TabPanel>\n        </div>\n    );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport cyan from '@material-ui/core/colors/cyan';\n\nexport default createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: cyan\n  },\n  overrides: {\n  \tMuiButton: {\n  \t\troot: {\n  \t\t\tcolor: 'pink',\n  \t\t\tsize: 'large'\n  \t\t}\n  \t}\n  }\n});","import React from 'react';\nimport './App.css';\nimport ModuleContainer from './components/ModuleContainer'\nimport theme from './themes/Theme'\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <ModuleContainer />\n            </div>\n        </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}